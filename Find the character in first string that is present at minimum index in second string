#include<iostream>
#include<climits>
#include<unordered_map>
using namespace std;
char printMinIndexChar(string str,string patt){
    unordered_map<char,int>um;
    int min_index=INT_MAX;
    int m = str.length();
    int n = patt.length();
    for(int i=0;i<m;i++){
        if(um.find(str[i])==um.end()){
            um[str[i]]=i;
        }
    }
    for(int j=0;j<n;j++){
        if(um.find(patt[j])!=um.end()&&um[patt[j]]<min_index){
            min_index=um[patt[j]];
            
        }
    }
    if(min_index!=INT_MAX){
        
    
    return str[min_index];
    }
    else {
        return 'N';
    }
}
int main() 
{ 
    string str = "geeksforgeeks"; 
    string patt = "set"; 
    cout<<printMinIndexChar(str, patt); 
    return 0; 
} 



2nd solution


#include<iostream>
#include<climits>
#include<unordered_map>
using namespace std;
char printMinIndexChar(string str,string patt){
    unordered_map<char,int>um;
    int min_index=INT_MAX;
    int m = str.length();
    int n = patt.length();
    for(int i=0;i<m;i++){
        if(um.find(str[i])==um.end()){
            um[str[i]]=i;
        }
    }
    for(int j=0;j<n;j++){
        if(um.find(patt[j])!=um.end()&&um[patt[j]]<min_index){
            min_index=um[patt[j]];
            
        }
    }
    if(min_index!=INT_MAX){
        
    
    return str[min_index];
    }
    else {
        return 'N';
    }
}
int main() 
{ 
    string str = "geeksforgeeks"; 
    string patt = "set"; 
    cout<<printMinIndexChar(str, patt); 
    return 0; 
} 
